name: build-ublue
on:
  workflow_call:
    inputs:
      fedora_version:
        description: "The Fedora release version: 39, 40, 41 etc"
        required: true
        type: string
      image_name:
        description: The name of the image to build.  E.G. base, silverblue
        required: true
        type: string
      source_image_name:
        description: The name of the image to use as a source.  E.G. sway-atomic
        required: false
        type: string
        default: ""
env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  build_ublue:
    name: main
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      # Checkout push-to-registry action GitHub repository
      - name: Checkout Push to Registry action
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Matrix Variables
        shell: bash
        env:
          IMAGE_NAME: ${{ inputs.image_name }}
          FEDORA_VERSION: ${{ inputs.fedora_version }}
          SOURCE_IMAGE_NAME: ${{ inputs.source_image_name }}
        run: |
          SOURCE_IMAGE=$IMAGE_NAME
          if [[ "$SOURCE_IMAGE_NAME" != "" ]]; then
            SOURCE_IMAGE=$SOURCE_IMAGE_NAME
          fi

          echo "SOURCE_ORG=fedora-ostree-desktops" >> $GITHUB_ENV
          echo "IMAGE_NAME=$IMAGE_NAME-main" >> $GITHUB_ENV
          echo "SOURCE_IMAGE=$SOURCE_IMAGE" >> $GITHUB_ENV

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"
          VARIANT="${{ inputs.fedora_version }}"

          if [[ "${{ inputs.fedora_version }}" -eq "41" ]]; then
            IS_LATEST_VERSION=false
            IS_STABLE_VERSION=true
            IS_GTS_VERSION=true
            IS_BETA_VERSION=false
          elif [[ "${{ inputs.fedora_version }}" -eq "42" ]]; then
            IS_LATEST_VERSION=true
            IS_STABLE_VERSION=true
            IS_GTS_VERSION=false
            IS_BETA_VERSION=false
          fi

          COMMIT_TAGS=()
          BUILD_TAGS=()

          # Have tags for tracking builds during pull request
          SHA_SHORT="${GITHUB_SHA::7}"
          COMMIT_TAGS+=("pr-${{ github.event.number }}-${VARIANT}")
          COMMIT_TAGS+=("${SHA_SHORT}-${VARIANT}")

          if [[ "${IS_LATEST_VERSION}" == "true" ]] && \
             [[ "${IS_STABLE_VERSION}" == "true" ]]; then
              COMMIT_TAGS+=("pr-${{ github.event.number }}")
              COMMIT_TAGS+=("${SHA_SHORT}")
          fi

          BUILD_TAGS=("${VARIANT}")

          # Append matching timestamp tags to keep a version history
          for TAG in "${BUILD_TAGS[@]}"; do
              BUILD_TAGS+=("${TAG}-${TIMESTAMP}")
          done

          if [[ "${IS_LATEST_VERSION}" == "true" ]] && \
             [[ "${IS_STABLE_VERSION}" == "true" ]]; then
              BUILD_TAGS+=("${TIMESTAMP}")
              BUILD_TAGS+=("latest")
              echo "DEFAULT_TAG=latest" >> $GITHUB_ENV
          elif [[ "${IS_GTS_VERSION}" == "true" ]]; then
              BUILD_TAGS+=("gts-${TIMESTAMP}")
              BUILD_TAGS+=("gts")
              echo "DEFAULT_TAG=gts" >> $GITHUB_ENV
          elif [[ "${IS_BETA_VERSION}" == "true" ]]; then
              BUILD_TAGS+=("beta-${TIMESTAMP}")
              BUILD_TAGS+=("beta")
              echo "DEFAULT_TAG=beta" >> $GITHUB_ENV
          fi

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
              done
              alias_tags=("${COMMIT_TAGS[@]}")
              echo "DEFAULT_TAG=${SHA_SHORT}-${VARIANT}" >> $GITHUB_ENV
          else
              alias_tags=("${BUILD_TAGS[@]}")
          fi

          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done

          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT

      - name: Query Image Digest
        id: query-digest
        env:
          SOURCE_IMAGE: ${{ env.SOURCE_IMAGE }}
          VERSION: ${{ inputs.fedora_version }}
          IMAGE_VERSIONS_FILE: ./image-versions.yaml
        run: |
          set -x

          AKMODS_DIGEST=$(yq -r ".images[] | select(.name == \"akmods-${VERSION}\") | .digest" "$IMAGE_VERSIONS_FILE")
          if [ -z "$AKMODS_DIGEST" ]; then
            echo "AKMODS_DIGEST not found in image-versions.yaml"
            exit 1
          fi

          BASE_IMAGE_DIGEST=$(yq -r ".images[] | select(.name == \"${SOURCE_IMAGE}-${VERSION}\") | .digest" "$IMAGE_VERSIONS_FILE")
          if [ -z "$BASE_IMAGE_DIGEST" ]; then
            echo "BASE_IMAGE_DIGEST not found in image-versions.yaml"
            exit 1
          fi
          echo "AKMODS_DIGEST=${AKMODS_DIGEST}" >> $GITHUB_OUTPUT
          echo "BASE_IMAGE_DIGEST=${BASE_IMAGE_DIGEST}" >> $GITHUB_OUTPUT

      - name: Get current version
        id: labels
        uses: Wandalen/wretry.action@e68c23e6309f2871ca8ae4763e7629b9c258e1ea # v3.8.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            set -eo pipefail
            ver=$(skopeo inspect docker://quay.io/${{ env.SOURCE_ORG }}/${{ env.SOURCE_IMAGE }}@${{ steps.query-digest.outputs.BASE_IMAGE_DIGEST }} | jq -r '.Labels["org.opencontainers.image.version"]')
            if [ -z "$ver" ] || [ "null" = "$ver" ]; then
              echo "inspected image version must not be empty or null"
              exit 1
            fi
            linux=$(skopeo inspect docker://${{ env.IMAGE_REGISTRY }}/akmods@${{ steps.query-digest.outputs.AKMODS_DIGEST }} | jq -r '.Labels["ostree.linux"]')
            echo "KERNEL_VERSION=$linux" >> $GITHUB_ENV
            echo "SOURCE_IMAGE_VERSION=$ver" >> $GITHUB_ENV

      - name: Pull Images
        uses: Wandalen/wretry.action@e68c23e6309f2871ca8ae4763e7629b9c258e1ea # v3.8.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            # pull the base image used for FROM in containerfile so
            # we can retry on that unfortunately common failure case
            podman pull quay.io/${{ env.SOURCE_ORG }}/${{ env.SOURCE_IMAGE }}:${{ inputs.fedora_version }}@${{ steps.query-digest.outputs.BASE_IMAGE_DIGEST }}
            podman pull ${{ env.IMAGE_REGISTRY }}/akmods:main-${{ inputs.fedora_version }}@${{ steps.query-digest.outputs.AKMODS_DIGEST }}

      # Generate image metadata
      - name: Image Metadata
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
        id: meta
        with:
          images: |
            ${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.version=${{ env.SOURCE_IMAGE_VERSION }}
            org.opencontainers.image.description=A base Universal Blue ${{ inputs.image_name }} image with batteries included
            ostree.linux=${{ env.KERNEL_VERSION }}
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/main/README.md
            io.artifacthub.package.logo-url=https://avatars.githubusercontent.com/u/120078124?s=200&v=4

      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@7a95fa7ee0f02d552a32753e7414641a04307056 # v2
        with:
          containerfiles: |
            ./Containerfile
          image: ${{ env.IMAGE_NAME }}
          tags: |
            ${{ steps.generate-tags.outputs.alias_tags }}
          build-args: |
            IMAGE_NAME=${{ inputs.image_name }}
            SOURCE_ORG=${{ env.SOURCE_ORG }}
            SOURCE_IMAGE=${{ env.SOURCE_IMAGE }}
            FEDORA_MAJOR_VERSION=${{ inputs.fedora_version }}
            KERNEL_VERSION=${{ env.KERNEL_VERSION }}
            IMAGE_REGISTRY=${{ env.IMAGE_REGISTRY }}
            BASE_IMAGE_DIGEST=${{ steps.query-digest.outputs.BASE_IMAGE_DIGEST }}
            AKMODS_DIGEST=${{ steps.query-digest.outputs.AKMODS_DIGEST }}
          labels: ${{ steps.meta.outputs.labels }}
          oci: false

      - name: Check Secureboot
        shell: bash
        run: |
          set -x
          if [[ ! $(command -v sbverify) || ! $(command -v curl) || ! $(command -v openssl) ]]; then
            sudo apt update
            sudo apt install sbsigntool curl openssl
          fi
          podman run -d --rm --name ${{env.IMAGE_NAME}}-$(echo "${{ steps.generate-tags.outputs.alias_tags }}" | cut -d " " -f 1) "${{ env.IMAGE_NAME }}":$(echo "${{ steps.generate-tags.outputs.alias_tags }}" | cut -d " " -f 1) sleep 1000
          podman cp ${{env.IMAGE_NAME}}-$(echo "${{ steps.generate-tags.outputs.alias_tags }}" | cut -d " " -f 1):/usr/lib/modules/${{ env.KERNEL_VERSION }}/vmlinuz .
          podman rm -f ${{env.IMAGE_NAME}}-$(echo "${{ steps.generate-tags.outputs.alias_tags }}" | cut -d " " -f 1)
          sbverify --list vmlinuz
          curl --retry 3 -Lo kernel-sign.der https://github.com/ublue-os/kernel-cache/raw/main/certs/public_key.der
          curl --retry 3 -Lo akmods.der https://github.com/ublue-os/kernel-cache/raw/main/certs/public_key_2.der
          openssl x509 -in kernel-sign.der -out kernel-sign.crt
          openssl x509 -in akmods.der -out akmods.crt
          sbverify --cert kernel-sign.crt vmlinuz || exit 1
          sbverify --cert akmods.crt vmlinuz || exit 1

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@d0603cd0a7dd490be678164909f65c7737470a7f # v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Push To GHCR
        uses: Wandalen/wretry.action@e68c23e6309f2871ca8ae4763e7629b9c258e1ea # v3.8.0
        id: push
        if: github.event_name != 'pull_request'
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          action: redhat-actions/push-to-registry@v2
          attempt_limit: 3
          attempt_delay: 15000
          with: |
            image: ${{ steps.build_image.outputs.image }}
            tags: ${{ steps.build_image.outputs.tags }}
            registry: ${{ steps.registry_case.outputs.lowercase }}
            username: ${{ env.REGISTRY_USER }}
            password: ${{ env.REGISTRY_PASSWORD }}
            extra-args: |
              --disable-content-trust

      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Sign container
      - uses: sigstore/cosign-installer@3454372f43399081ed03b604cb2d021dabca52bb # v3.8.2
        if: github.event_name != 'pull_request'

      - name: Sign container image
        if: github.event_name != 'pull_request'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ steps.build_image.outputs.image }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.outputs && fromJSON(steps.push.outputs.outputs).digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Echo outputs
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"

  check:
    name: Check all ${{ inputs.image_name }}:${{ inputs.fedora_version }} builds successful
    if: always()
    runs-on: ubuntu-latest
    needs: [build_ublue]
    steps:
      - name: Check Jobs
        env:
          JOBS: ${{ toJson(needs) }}
        run: |
          echo "Job status:"
          echo $JOBS | jq -r 'to_entries[] | " - \(.key): \(.value.result)"'

          for i in $(echo $JOBS | jq -r 'to_entries[] | .value.result'); do
            if [ "$i" != "success" ] && [ "$i" != "skipped" ]; then
              echo ""
              echo "Status check not okay!"
              exit 1
            fi
          done
