name: build-ublue
on:
  workflow_call:
    inputs:
      image_version:
        description: "The Version: gts, latest, beta... Justfile holds value"
        required: true
        type: string
      image_name:
        description: "The name of the image to build.  E.G. base, silverblue"
        required: true
        type: string
      image_variant:
        description: "The variant of image to build.  E.G. main, nvidia"
        required: false
        type: string
        default: "main"

env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  SET_X: 1

jobs:
  build_ublue:
    name: main
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
        # Checkout Git Repository
      - name: Checkout
        # yamllint disable-line rule:line-length rule:comments
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Setup Just
        # yamllint disable-line rule:line-length rule:comments
        uses: extractions/setup-just@e33e0265a09d6d736e2ee1e0eb685ef1de4669ff # v3

      - name: Build Image
        shell: bash
        run: |
          set -x
          just build-container \
               "${{ inputs.image_name }}" \
               "${{ inputs.image_version }}" \
               "${{ inputs.image_variant }}" \
               "${{ github.event_name }}"

      - name: Check Secureboot
        shell: bash
        run: |
          set -x
          just secureboot \
              "${{ inputs.image_name }}" \
              "${{ inputs.image_version }}" \
              "${{ inputs.image_variant }}"

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@d0603cd0a7dd490be678164909f65c7737470a7f # v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Push To GHCR
        id: push
        if: github.event_name != 'pull_request'
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          just login-to-ghcr "$REGISTRY_USER" "$REGISTRY_TOKEN"
          just push-to-registry \
              "${{ inputs.image_name }}" \
              "${{ inputs.image_version }}" \
              "${{ inputs.image_variant }}" \
              "${{ steps.registry_case.outputs.lowercase }}"

      - name: Sign Container Image
        id: sign
        if: github.event_name != 'pull_request'
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
        shell: bash
        run: |
          just cosign-sign \
              "${{ inputs.image_name }}" \
              "${{ inputs.image_version }}" \
              "${{ inputs.image_variant }}" \
              "${{ steps.registry_case.outputs.lowercase }}"

      - name: SBOM Setup
        run: |
          set -eou pipefail
          echo "=== FREE SPACE ==="
          df -h
          echo "=== MEMORY AND SWAP ==="
          free -h
          swapon --show
          echo "=== MAKING SWAPFILE ==="
          sudo swapoff /mnt/swapfile
          sudo rm -f /mnt/swapfile
          SWAP_FILE="/mnt/swapfile"
          sudo fallocate -l 70G "$SWAP_FILE"
          sudo chmod 600 "$SWAP_FILE"
          sudo mkswap "$SWAP_FILE"
          sudo swapon "$SWAP_FILE"
          echo "=== FREE SPACE ==="
          df -h
          echo "=== MEMORY AND SWAP ==="
          free -h
          swapon --show

      - name: Generate SBOM
        id: sbom
        if: false
        shell: bash
        run: |
          systemctl enable --now --user podman.socket

          sbom=$(just gen-sbom \
              "${{ inputs.image_name }}" \
              "${{ inputs.image_version }}" \
              "${{ inputs.image_variant }}")
          echo "sbom=$sbom" >> "$GITHUB_OUTPUT"

      - name: Attest SBOM
        id: attest
        shell: bash
        if: false
        run: |
          just sbom-attest \
              "${{ inputs.image_name }}" \
              "${{ inputs.image_version }}" \
              "${{ inputs.image_variant }}" \
              "${{ steps.registry_case.outputs.lowercase }}" \
              "${{ steps.sbom.outputs.sbom }}"

  check:
    name: Check all ${{ inputs.image_name }}:${{ inputs.image_version }} builds successful
    if: always()
    runs-on: ubuntu-latest
    needs: [build_ublue]
    steps:
      - name: Check Jobs
        env:
          JOBS: ${{ toJson(needs) }}
        run: |
          echo "Job status:"
          echo $JOBS | jq -r 'to_entries[] | " - \(.key): \(.value.result)"'

          for i in $(echo $JOBS | jq -r 'to_entries[] | .value.result'); do
            if [ "$i" != "success" ] && [ "$i" != "skipped" ]; then
              echo ""
              echo "Status check not okay!"
              exit 1
            fi
          done
